'use strict';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var FileType = require('file-type'), setCookie = require('set-cookie-parser'), isImage = require('is-image'), fs = require('fs'), path = require('path'), isSvg = require('is-svg'), request = require('postman-request'), qs = require('querystring'), JSON5 = require('json5'), stripJsonComments = require("strip-json-comments"), JSONbig = require('json-bigint'), ATools = require('apipost-tools'), Base64 = require('js-base64'), CryptoJS = require("crypto-js"), UrlParse = require('url-parse'), Hawk = require('hawk'), parsers = require('www-authenticate').parsers, _ = require('lodash'), aws4 = require('aws4'), EdgeGridAuth = require('akamai-edgegrid/src/auth'), ntlm = require('httpntlm').ntlm, crypto = require('crypto'), OAuth = require('oauth-1.0a'), MIMEType = require("whatwg-mimetype"), isBase64 = require('is-base64'), ASideTools = require('apipost-inside-tools'), contentDisposition = require('content-disposition');
// Apipost 发送模块
var ApipostRequest = /** @class */ (function () {
    // 构造函数
    function ApipostRequest(opts) {
        var _a, _b, _c;
        if (!opts) {
            opts = {};
        }
        this.requestloop = 0; // 初始化重定向
        // 配置项
        this.maxrequstloop = parseInt(opts.maxrequstloop) > 0 ? parseInt(opts.maxrequstloop) : 5; // 最大重定向次数
        this.followRedirect = opts.hasOwnProperty('followRedirect') ? opts.followRedirect : 1; // 是否允许重定向 1 允许 -1 不允许
        this.strictSSL = (_a = !!opts.strictSSL) !== null && _a !== void 0 ? _a : 0;
        this.https = (_b = opts.https) !== null && _b !== void 0 ? _b : {
            "rejectUnauthorized": -1,
            "certificateAuthority": '',
            "certificate": '',
            "key": '',
            "pfx": '',
            "passphrase": '' // 私钥密码
        };
        this.timeout = parseInt(opts.timeout) >= 0 ? parseInt(opts.timeout) : 0;
        this.proxy = (opts === null || opts === void 0 ? void 0 : opts.proxy) || '';
        this.proxyAuth = (_c = opts === null || opts === void 0 ? void 0 : opts.proxyAuth) !== null && _c !== void 0 ? _c : '';
        this.target_id = opts.target_id;
        this.isCloud = opts.hasOwnProperty('isCloud') ? (parseInt(opts.isCloud) > 0 ? 1 : -1) : -1; // update 0703
        this.requestLink = null;
        // 基本信息
        this.version = '0.0.28';
        this.jsonschema = JSON.parse(fs.readFileSync(path.join(__dirname, './apipost-http-schema.json'), 'utf-8'));
    }
    // 结果转换函数
    ApipostRequest.prototype.ConvertResult = function (status, message, data) {
        return ASideTools.ConvertResult(status, message, data);
    };
    // 获取缓存目录
    ApipostRequest.prototype.getCachePath = function () {
        return ASideTools.getCachePath();
    };
    // 格式化 query 参数
    ApipostRequest.prototype.formatQueries = function (arr) {
        var queries = '';
        if (arr instanceof Array) {
            arr.forEach(function (item) {
                if (parseInt(item.is_checked) === 1) {
                    item.value;
                    if (item.value === '') {
                        queries += "".concat(item.key, "&");
                    }
                    else {
                        queries += "".concat(item.key, "=").concat(item.value, "&");
                    }
                }
            });
        }
        return qs.parse(_.trimEnd(queries, '&'));
    };
    // 用新的query对象(object)设置 uri 的query参数
    // return uri、host、path
    // setQueryString('https://echo.apipost.cn/get.php?id=1', {"id":[1,2], "token":3})
    // return {"uri":"https://echo.apipost.cn/get.php?id=1&id=2&token=3","host":"echo.apipost.cn","fullPath":"/get.php?id=1&id=2&token=3"}
    ApipostRequest.prototype.setQueryString = function (uri, paras) {
        var urls = new UrlParse(uri);
        var fullPath = urls.href.substr(urls.origin.length);
        var host = urls['host'];
        var baseUri = uri.substr(0, uri.indexOf(urls.query));
        if (urls.query !== '') {
            var queries = qs.parse(urls.query.substr(1));
            fullPath = urls['pathname'] + '?' + qs.stringify(Object.assign(queries, paras));
            uri = baseUri + '?' + qs.stringify(Object.assign(queries, paras));
        }
        else {
            fullPath += '?' + qs.stringify(paras);
            uri += '?' + qs.stringify(paras);
        }
        return { uri: uri, host: host, fullPath: fullPath, baseUri: baseUri };
    };
    // 根据 auth 类型生成auth header参数
    ApipostRequest.prototype.createAuthHeaders = function (target) {
        var _a;
        var headers = {};
        var auth = target.request.auth;
        var _b = this.setQueryString(target.request.url, this.formatQueries(target.request.query.parameter)), uri = _b.uri, host = _b.host, fullPath = _b.fullPath; _b.baseUri;
        var entityBody = '';
        var rbody = this.formatRequestBodys(target);
        if (target.request.body.mode == 'urlencoded') {
            entityBody = rbody['form'];
        }
        else if (target.request.body.mode != 'form-data') {
            entityBody = rbody['body'];
        }
        try { // fixed 修复可能因第三方包报错导致的 bug
            switch (auth.type) {
                case 'noauth':
                    break;
                case 'kv':
                    headers[auth.kv.key] = auth.kv.value;
                    break;
                case 'bearer':
                    headers['Authorization'] = "Bearer " + auth.bearer.key;
                    break;
                case 'basic':
                    headers['Authorization'] = "Basic " + Base64.encode(auth.basic.username + ':' + auth.basic.password);
                    break;
                case 'digest':
                    var ha1 = '';
                    var ha2 = '';
                    var response = '';
                    var hashFunc = CryptoJS.MD5;
                    if (auth.digest.algorithm == 'MD5' || auth.digest.algorithm == 'MD5-sess') {
                        hashFunc = CryptoJS.MD5;
                    }
                    else if (auth.digest.algorithm == 'SHA-256' || auth.digest.algorithm == 'SHA-256-sess') {
                        hashFunc = CryptoJS.SHA256;
                    }
                    else if (auth.digest.algorithm == 'SHA-512' || auth.digest.algorithm == 'SHA-512-sess') {
                        hashFunc = CryptoJS.SHA512;
                    }
                    var cnonce = auth.digest.cnonce == '' ? 'apipost' : auth.digest.cnonce;
                    if (auth.digest.algorithm.substr(-5) == '-sess') {
                        ha1 = hashFunc(hashFunc(auth.digest.username + ':' + auth.digest.realm + ':' + auth.digest.password).toString() + ':' + auth.digest.nonce + ':' + cnonce).toString();
                    }
                    else {
                        ha1 = hashFunc(auth.digest.username + ':' + auth.digest.realm + ':' + auth.digest.password).toString();
                    }
                    if (auth.digest.qop != 'auth-int') {
                        ha2 = hashFunc(target.method + ':' + fullPath).toString();
                    }
                    else if (auth.digest.qop == 'auth-int') {
                        ha2 = hashFunc(target.method + ':' + fullPath + ':' + hashFunc(entityBody).toString()).toString();
                    }
                    if (auth.digest.qop == 'auth' || auth.digest.qop == 'auth-int') {
                        response = hashFunc(ha1 + ':' + auth.digest.nonce + ':' + (auth.digest.nc || '00000001') + ':' + cnonce + ':' + auth.digest.qop + ':' + ha2).toString();
                    }
                    else {
                        response = hashFunc(ha1 + ':' + auth.digest.nonce + ':' + ha2).toString();
                    }
                    headers['Authorization'] = "Digest username=\"" + auth.digest.username + "\", realm=\"" + auth.digest.realm + "\", nonce=\"" + auth.digest.nonce + "\", uri=\"" + fullPath + "\", algorithm=\"" + auth.digest.algorithm + "\", qop=" + auth.digest.qop + ",nc=" + (auth.digest.nc || '00000001') + ", cnonce=\"" + cnonce + "\", response=\"" + response + "\", opaque=\"" + auth.digest.opaque + "\"";
                    break;
                case 'hawk':
                    var options = {
                        ext: auth.hawk.extraData,
                        timestamp: auth.hawk.timestamp,
                        nonce: auth.hawk.nonce,
                        // payload: '{"some":"payload"}',                      // UTF-8 encoded string for body hash generation (ignored if hash provided)
                        // contentType: 'application/json',                    // Payload content-type (ignored if hash provided)
                        // hash: false,
                        app: auth.hawk.app,
                        dlg: auth.hawk.delegation
                    };
                    if (auth.hawk.algorithm === '') {
                        auth.hawk.algorithm = 'sha256';
                    }
                    if (auth.hawk.authId !== '' && auth.hawk.authKey !== '') { // fix bug
                        var header = Hawk.client.header(uri, target.method, __assign({ credentials: {
                                id: auth.hawk.authId,
                                key: auth.hawk.authKey,
                                algorithm: auth.hawk.algorithm,
                            } }, options)).header;
                        headers['Authorization'] = header;
                    }
                    break;
                case 'awsv4':
                    var awsauth = aws4.sign({
                        method: target.method,
                        host: host,
                        path: fullPath,
                        service: auth.awsv4.service,
                        region: auth.awsv4.region,
                        body: entityBody
                    }, {
                        accessKeyId: auth.awsv4.accessKey,
                        secretAccessKey: auth.awsv4.secretKey,
                        sessionToken: auth.awsv4.sessionToken
                    });
                    Object.assign(headers, awsauth.headers);
                    break;
                case 'edgegrid':
                    var eg = EdgeGridAuth.generateAuth({
                        path: uri,
                        method: target.method,
                        headers: {},
                        body: entityBody
                    }, auth.edgegrid.clientToken, auth.edgegrid.clientSecret, auth.edgegrid.accessToken, auth.edgegrid.baseUri, 0, auth.edgegrid.nonce, auth.edgegrid.timestamp);
                    Object.assign(headers, eg.headers);
                    break;
                case 'ntlm': // https://github.com/SamDecrock/node-http-ntlm
                    Object.assign(headers, {
                        'Connection': 'keep-alive',
                        'Authorization': ntlm.createType1Message({
                            url: uri,
                            username: auth.ntlm.username,
                            password: auth.ntlm.password,
                            workstation: auth.ntlm.workstation,
                            domain: auth.ntlm.domain
                        })
                    });
                    break;
                case 'ntlm_close':
                    Object.assign(headers, {
                        'Connection': 'close',
                        'Authorization': ntlm.createType3Message(auth.ntlm_close.type2msg, {
                            url: uri,
                            username: auth.ntlm.username,
                            password: auth.ntlm.password,
                            workstation: auth.ntlm.workstation,
                            domain: auth.ntlm.domain
                        })
                    });
                    break;
                case 'oauth1':
                    var hmac_1 = 'sha1';
                    if (auth.oauth1.signatureMethod === 'HMAC-SHA1') {
                        hmac_1 = 'sha1';
                    }
                    else if (auth.oauth1.signatureMethod === 'HMAC-SHA256') {
                        hmac_1 = 'sha256';
                    }
                    else if (auth.oauth1.signatureMethod === 'HMAC-SHA512') {
                        hmac_1 = 'sha512';
                    }
                    else {
                        // todo..
                        // 支持更多加密方式
                    }
                    var oauth = OAuth({
                        consumer: {
                            key: auth.oauth1.consumerKey,
                            secret: auth.oauth1.consumerSecret,
                            version: (_a = auth.oauth1.version) !== null && _a !== void 0 ? _a : '1.0',
                            nonce: auth.oauth1.nonce,
                            realm: auth.oauth1.realm,
                            timestamp: auth.oauth1.timestamp,
                            includeBodyHash: auth.oauth1.includeBodyHash,
                        },
                        signature_method: auth.oauth1.signatureMethod,
                        hash_function: function (base_string, key) {
                            var hash = crypto.createHmac(hmac_1, key).update(base_string).digest('base64');
                            return hash;
                        },
                    });
                    var request_data = {
                        url: uri,
                        method: target.method,
                        data: auth.oauth1.includeBodyHash ? entityBody : {},
                        oauth_callback: auth.oauth1.callback
                    };
                    // console.log(request_data)
                    var token = {
                        key: auth.oauth1.token,
                        secret: auth.oauth1.tokenSecret,
                    };
                    Object.assign(headers, oauth.toHeader(oauth.authorize(request_data, token)));
                    break;
            }
        }
        catch (e) { }
        return headers;
    };
    // 格式化headers参数
    ApipostRequest.prototype.formatRequestHeaders = function (arr, mode) {
        var headers = {};
        switch (mode) {
            case "json":
                headers['content-type'] = "application/json";
                break;
            case "xml":
                headers['content-type'] = "application/xml";
                break;
            case "javascript":
                headers['content-type'] = "application/javascript";
                break;
            case "plain":
                headers['content-type'] = "text/plain";
                break;
            case "html":
                headers['content-type'] = "text/html";
                break;
        }
        if (arr instanceof Array) {
            arr.forEach(function (item) {
                if (parseInt(item.is_checked) === 1) {
                    headers[item.key] = item.value;
                }
            });
        }
        return headers;
    };
    // 格式化 urlencode 参数
    ApipostRequest.prototype.formatUrlencodeBodys = function (arr) {
        var bodys = '';
        if (arr instanceof Array) {
            arr.forEach(function (item) {
                if (parseInt(item.is_checked) === 1) {
                    if (item.key !== '') {
                        bodys += item.key + '=' + item.value + '&';
                    }
                }
            });
        }
        bodys = bodys.substr(-1) == '&' ? bodys.substr(0, bodys.length - 1) : bodys;
        return bodys;
    };
    ApipostRequest.prototype.getBase64Mime = function (dataurl) {
        try {
            var arr = dataurl.split(','), mime = arr[0].match(/:(.*?);/)[1];
            if (mime) {
                var mimeType = new MIMEType(mime);
                return { ext: mimeType['_subtype'], mime: mimeType.essence };
            }
            else {
                return null;
            }
        }
        catch (error) {
            return null;
        }
    };
    // 格式化 FormData 参数
    ApipostRequest.prototype.formatFormDataBodys = function (forms, arr) {
        var that = this;
        if (arr instanceof Array) {
            arr.forEach(function (item) {
                if (parseInt(item.is_checked) === 1) {
                    var options_1 = {};
                    if (typeof item.contentType === 'string') {
                        options_1['contentType'] = item.contentType;
                    }
                    if (item.type === 'File') {
                        var useFileBase64_1 = true;
                        if (_.isArray(item === null || item === void 0 ? void 0 : item.value) && item.value.length > 0) {
                            item.value.forEach(function (path) {
                                try {
                                    if (item.key !== '') {
                                        forms.append(item.key, fs.createReadStream(path), options_1);
                                    }
                                    useFileBase64_1 = false;
                                }
                                catch (error) {
                                }
                            });
                        }
                        if (_.isArray(item === null || item === void 0 ? void 0 : item.fileBase64) && item.fileBase64.length > 0 && useFileBase64_1) {
                            var _file_names_1 = typeof item.filename == 'string' ? item.filename.split('|') : [];
                            var _i_1 = 0;
                            item.fileBase64.forEach(function (base64) {
                                var fileBase64 = (isBase64(base64, { allowMime: true }) || base64.indexOf('base64,') > 0) ? base64 : (isBase64(item.value, { allowMime: true }) ? item.value : '');
                                if (isBase64(fileBase64, { allowMime: true }) || base64.indexOf('base64,') > 0) { // 云端
                                    var _mime = that.getBase64Mime(fileBase64);
                                    var _temp_file = path.join(path.resolve(that.getCachePath()), "cache_".concat(CryptoJS.MD5(fileBase64).toString()));
                                    try {
                                        fs.accessSync(_temp_file);
                                    }
                                    catch (err) {
                                        try {
                                            fs.mkdirSync(_temp_file);
                                        }
                                        catch (e) { }
                                    }
                                    if (typeof _file_names_1[_i_1] == 'string') {
                                        _temp_file = path.join(_temp_file, "".concat(_file_names_1[_i_1]));
                                    }
                                    else {
                                        _temp_file = path.join(_temp_file, "".concat(CryptoJS.MD5(item.key).toString(), ".").concat(_mime ? _mime.ext : 'unknown'));
                                    }
                                    fs.writeFileSync(_temp_file, Buffer.from(fileBase64.replace(/^data:(.+?);base64,/, ''), 'base64'));
                                    if (item.key !== '') {
                                        forms.append(item.key, fs.createReadStream(_temp_file), options_1);
                                    }
                                    // fs.unlink(_temp_file, () => { }); // fix 文件上传bug
                                }
                                _i_1++;
                            });
                        }
                    }
                    else {
                        if (item.key !== '') {
                            forms.append(item.key, item.value, options_1);
                        }
                    }
                }
            });
        }
        return forms;
    };
    // 格式化 json 参数
    ApipostRequest.prototype.formatRawJsonBodys = function (raw) {
        if (raw === void 0) { raw = ''; }
        var bodys = '';
        if (ATools.isJson5(raw)) {
            try {
                bodys = JSONbig.stringify(JSONbig.parse(stripJsonComments(raw)));
            }
            catch (e) {
                bodys = JSON.stringify(JSON5.parse(raw));
            }
        }
        else {
            bodys = raw;
        }
        return bodys;
    };
    // 格式化 其他 非json raw参数
    ApipostRequest.prototype.formatRawBodys = function (raw) {
        if (raw === void 0) { raw = ''; }
        var bodys = raw;
        // if(ATools.isJson5(raw)){
        //     bodys = JSON.stringify(JSON5.parse(raw));
        // }else{
        //     bodys = raw;
        // }
        return bodys;
    };
    // 格式化 请求Body 参数
    ApipostRequest.prototype.formatRequestBodys = function (target) {
        var _body = {};
        switch (target.request.body.mode) {
            case "none":
                break;
            case "form-data":
                break;
            case "urlencoded":
                _body = {
                    form: this.formatUrlencodeBodys(target.request.body.parameter)
                };
                break;
            case "json":
                _body = {
                    body: this.formatRawJsonBodys(target.request.body.raw)
                };
                break;
            default:
                _body = {
                    body: this.formatRawBodys(target.request.body.raw)
                };
                break;
        }
        return _body;
    };
    // 格式化 请求Body 参数（用于脚本使用）
    ApipostRequest.prototype.formatDisplayRequestBodys = function (target) {
        var _body = {
            'request_bodys': {},
            'raw': {
                'mode': 'none'
            }
        };
        var arr = _.cloneDeep(target.request.body.parameter);
        switch (target.request.body.mode) {
            case "none":
                _body = {
                    'request_bodys': '',
                    'raw': {
                        'mode': 'none'
                    }
                };
                break;
            case "form-data":
                if (arr instanceof Array) {
                    var _raw_1 = [];
                    arr.forEach(function (item) {
                        if (parseInt(item.is_checked) === 1) {
                            _body.request_bodys[item.key] = item.value;
                            if (item.type === 'File') {
                                _raw_1.push({
                                    key: item.key,
                                    type: 'file',
                                    src: item.value
                                });
                            }
                            else {
                                _raw_1.push({
                                    key: item.key,
                                    type: "text",
                                    value: item.value
                                });
                            }
                        }
                    });
                    _body.raw = {
                        'mode': 'formdata',
                        'formdata': _raw_1
                    };
                }
                break;
            case "urlencoded":
                if (arr instanceof Array) {
                    var _raw_2 = [];
                    arr.forEach(function (item) {
                        if (parseInt(item.is_checked) === 1) {
                            _body.request_bodys[item.key] = item.value;
                            _raw_2.push({
                                key: item.key,
                                value: item.value
                            });
                        }
                    });
                    _body.raw = {
                        'mode': 'urlencoded',
                        'urlencoded': _raw_2
                    };
                }
                break;
            default:
                _body = {
                    'request_bodys': this.formatRawJsonBodys(target.request.body.raw),
                    'raw': {
                        'mode': 'raw',
                        'raw': this.formatRawJsonBodys(target.request.body.raw),
                        'options': {
                            'raw': {
                                'language': target.request.body.mode
                            }
                        }
                    }
                };
                break;
        }
        return _body;
    };
    // 响应时间点
    ApipostRequest.prototype.resposneAt = function () {
        var time = new Date();
        var h = time.getHours();
        h = h < 10 ? '0' + h : h;
        var m = time.getMinutes();
        m = m < 10 ? '0' + m : m;
        var s = time.getSeconds();
        s = s < 10 ? '0' + s : s;
        return h + ':' + m + ':' + s;
    };
    // 处理 响应参数
    ApipostRequest.prototype.formatResponseData = function (error, response, body) {
        return __awaiter(this, void 0, void 0, function () {
            var _agent, netWork, client, res, resMime, _headers, mimeType, array, i, lowerHeaders, k, c, disposition, header, k, _a, _b, h;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _agent = 'Desktop-Agent';
                        if (this.isCloud > 0) {
                            _agent = 'Cloud-Agent';
                        }
                        netWork = {
                            agent: _agent,
                            address: {}
                        };
                        client = _.isObject(response.client) ? response.client : response.client;
                        if (_.isObject(client)) {
                            // localAddress
                            if (_.isString(client.localAddress)) {
                                _.assign(netWork.address, {
                                    local: {
                                        address: client.localAddress,
                                        port: client.localPort
                                    }
                                });
                            }
                            // remoteAddress
                            if (_.isString(client.remoteAddress)) {
                                _.assign(netWork.address, {
                                    remote: {
                                        address: client.remoteAddress,
                                        family: client.remoteFamily,
                                        port: client.remotePort
                                    }
                                });
                            }
                        }
                        res = {
                            target_id: this.target_id,
                            // client:{}, // 请求 client 属性
                            // elapsedTime:0, // 请求总时间 （ms）
                            responseTime: 0,
                            responseSize: 0,
                            resposneAt: this.resposneAt(),
                            netWork: netWork,
                            // statusObj : {
                            //     code:200,
                            //     message:"OK"
                            // }, // 响应状态
                            status: "OK",
                            code: 200,
                            timingPhases: {},
                            resHeaders: {},
                            headers: {},
                            header: [],
                            fitForShow: "Monaco",
                            resMime: {},
                            rawCookies: [],
                            cookies: {},
                            rawBody: "",
                            base64Body: "",
                            stream: {
                                "type": "Buffer",
                                "data": []
                            },
                            raw: {
                                status: 200,
                                responseTime: 0,
                                type: 'html',
                                responseText: '',
                            },
                            json: {}
                        };
                        // 响应时间细节
                        if (response.timingPhases) {
                            res.timingPhases = response.timingPhases;
                        }
                        // 请求总时间
                        if (response.elapsedTime >= 0) {
                            res.responseTime = response.elapsedTime;
                        }
                        // 响应码
                        // res.statusObj = {
                        //     code:response.statusCode,
                        //     message:response.statusMessage
                        // }
                        res.code = response.statusCode;
                        res.status = response.statusMessage;
                        res.raw.status = res.code; //响应状态码（200、301、404等） // fixed bug
                        res.raw.responseTime = response.elapsedTime; //响应时间（毫秒）
                        return [4 /*yield*/, FileType.fromBuffer(body)];
                    case 1:
                        resMime = _c.sent();
                        if (isSvg(body.toString())) {
                            res.resMime = { ext: "svg", mime: "image/svg+xml" };
                            res.fitForShow = "Image";
                            if (this.isCloud < 1) {
                                res.rawBody = path.join(path.resolve(this.getCachePath()), 'response_' + this.target_id + '.svg');
                                fs.writeFileSync(res.rawBody, body);
                            }
                            else {
                                res.rawBody = '';
                            }
                            // 拼装 raw
                            res.raw.type = 'svg';
                            res.raw.responseText = '';
                        }
                        else {
                            //MIMEType
                            if (!resMime) {
                                _headers = _.cloneDeep(response.headers);
                                if (_headers && _.mapKeys(_headers, function (v, k) { return k.toLowerCase(); }).hasOwnProperty('content-type')) {
                                    mimeType = new MIMEType(_.mapKeys(_headers, function (v, k) { return k.toLowerCase(); })['content-type']);
                                    res.resMime = { ext: mimeType['_subtype'], mime: mimeType.essence };
                                }
                                res.fitForShow = "Monaco";
                                res.rawBody = body.toString();
                                if (ATools.isJson5(res.rawBody)) {
                                    try {
                                        res.json = JSONbig.parse(stripJsonComments(res.rawBody));
                                    }
                                    catch (e) {
                                        res.json = JSON5.parse(res.rawBody);
                                    }
                                }
                                // 拼装 raw
                                if (res.resMime && res.resMime.ext) {
                                    res.raw.type = res.resMime.ext;
                                }
                                else {
                                    res.raw.type = ATools.isJson(res.rawBody) ? 'json' : ATools.isJsonp(res.rawBody) ? 'jsonp' : 'html'; //响应类型（json等）
                                }
                                res.raw.responseText = res.rawBody;
                            }
                            else {
                                res.resMime = resMime;
                                if (res.resMime.ext === 'pdf') {
                                    res.fitForShow = "Pdf";
                                }
                                else if (isImage('test.' + res.resMime.ext)) {
                                    res.fitForShow = "Image";
                                }
                                else if (res.resMime.ext === 'xml') {
                                    res.fitForShow = "Monaco";
                                }
                                else {
                                    res.fitForShow = "Other";
                                }
                                // 拼装 raw
                                res.raw.type = res.resMime.ext;
                                if (res.resMime.ext === 'xml') {
                                    res.raw.responseText = res.rawBody = body.toString();
                                }
                                else {
                                    res.raw.responseText = '';
                                    if (this.isCloud < 1) {
                                        res.rawBody = path.join(path.resolve(this.getCachePath()), 'response_' + this.target_id + '.' + resMime.ext);
                                        fs.writeFileSync(res.rawBody, body);
                                    }
                                    else {
                                        res.rawBody = '';
                                    }
                                }
                            }
                        }
                        array = [];
                        for (i = 0; i < response.body.length; i++) {
                            array[i] = response.body[i];
                        }
                        if (res.resMime) {
                            res.base64Body = "data:".concat(res.resMime['mime'], ";base64,").concat(response.body.toString('base64'));
                        }
                        else {
                            res.base64Body = "data:text/plain;base64,".concat(response.body.toString('base64'));
                        }
                        res.stream.data = array;
                        // 响应头 和 cookie
                        if (response.headers) {
                            res.resHeaders = res.headers = response.headers;
                            lowerHeaders = {};
                            for (k in response.headers) {
                                if (_.isString(k)) {
                                    lowerHeaders[k.toLowerCase()] = response.headers[k];
                                }
                            }
                            // 响应 cookie
                            if (lowerHeaders['set-cookie'] instanceof Array) {
                                res.resCookies = setCookie.parse(lowerHeaders['set-cookie']);
                                for (c in res.resCookies) {
                                    res.cookies[res.resCookies[c].name] = res.resCookies[c].value;
                                }
                            }
                            res.rawCookies = res.resCookies; // 此参数是为了兼容postman
                            if (lowerHeaders.hasOwnProperty('content-length')) {
                                res.responseSize = parseFloat((lowerHeaders['content-length'] / 1024).toFixed(2));
                            }
                            else {
                                res.responseSize = parseFloat((body.toString().length / 1024).toFixed(2));
                            }
                            // 响应文件名
                            if (lowerHeaders.hasOwnProperty('content-disposition')) {
                                disposition = contentDisposition.parse(lowerHeaders['content-disposition']);
                                if (_.isObject(disposition) && _.isObject(disposition.parameters) && _.isString(disposition.parameters.filename)) {
                                    res.filename = disposition.parameters.filename;
                                }
                            }
                            else {
                                if (res.resMime) {
                                    res.filename = "response_".concat(this.target_id, ".").concat(res.resMime.ext);
                                }
                                else {
                                    res.filename = "response_".concat(this.target_id, ".txt");
                                }
                            }
                            header = [];
                            for (k in response.headers) {
                                if (response.headers[k] instanceof Array) {
                                    for (_a = 0, _b = response.headers[k]; _a < _b.length; _a++) {
                                        h = _b[_a];
                                        header.push({
                                            "key": k,
                                            "value": h
                                        });
                                    }
                                }
                                else {
                                    header.push({
                                        "key": k,
                                        "value": response.headers[k]
                                    });
                                }
                            }
                            res.header = header;
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    // 取消发送
    ApipostRequest.prototype.abort = function () {
        try {
            if (_.isObject(this.requestLink) && _.isFunction(this.requestLink.abort)) {
                this.requestLink.abort();
            }
        }
        catch (e) { }
    };
    // 发送
    ApipostRequest.prototype.request = function (target, extra_headers, extra_opts) {
        var _this = this;
        if (extra_headers === void 0) { extra_headers = {}; }
        if (extra_opts === void 0) { extra_opts = {}; }
        this.target_id = target.target_id;
        return new Promise(function (reslove, reject) {
            var _a;
            // // 配置项
            // this.https = opts.https ?? { // 证书相关
            //     "rejectUnauthorized": -1, // 忽略错误证书 1 -1
            //     "certificateAuthority":'', // ca证书地址
            //     "certificate": '', // 客户端证书地址
            //     "key":'', //客户端证书私钥文件地址
            //     "pfx":'', // pfx 证书地址
            //     "passphrase": '' // 私钥密码
            // };
            // this.proxy = opts.proxy ?? {};
            // this.proxyAuth = opts.proxyAuth ?? 'username:password';
            try {
                var that_1 = _this;
                var Validator = require('jsonschema').validate;
                that_1.requestloop++;
                if (!Validator(target, that_1.jsonschema).valid) {
                    reject(that_1.ConvertResult('error', '错误的JSON数据格式'));
                }
                else {
                    if (target.request.auth.type == 'ntlm') {
                        Object.assign(extra_opts, { forever: true });
                    }
                    // 获取发送参数
                    var options = __assign(__assign({ 
                        // 拓展部分(固定) +complated
                        "encoding": null, "verbose": !0, "time": !0, "followRedirect": !1, 
                        // "followAllRedirects":!0,
                        // "maxRedirects":15,
                        "timeout": that_1.timeout, "brotli": !0, "gzip": !0, "useQuerystring": !0, 
                        // "allowContentTypeOverride": !0,
                        // 请求URL 相关 +complated
                        "uri": target.request.url, 
                        // "baseUrl": "https://go.apipost.cn/", // 前置url，可以用此项决定环境前置URL
                        // query 相关+complated
                        qs: that_1.formatQueries(target.request.query.parameter), 
                        // "statusMessageEncoding":"utf8",
                        // 基本设置 +complated
                        "method": target.method, 
                        // 请求Body（仅用于获取）
                        "_requestBody": _this.formatDisplayRequestBodys(target), 
                        // header头相关 +complated
                        "headers": __assign(__assign(__assign({ "user-agent": "ApipostRequest/" + that_1.version + " (https://www.apipost.cn)" }, _this.formatRequestHeaders(target.request.header.parameter, target.request.body.mode)), _this.createAuthHeaders(target)), extra_headers), 
                        // 证书相关
                        "agentOptions": {}, 
                        // SSL 证书相关 +complated
                        'strictSSL': !!that_1.strictSSL }, _this.formatRequestBodys(target)), extra_opts);
                    //#region 代理
                    if (_.isString(_this.proxy) && _this.proxy.length > 0) {
                        _this.proxy = ATools.completionHttpProtocol(_this.proxy);
                        options.proxy = _this.proxy;
                    }
                    if (_.isString(_this.proxyAuth) && _this.proxyAuth.length > 0) {
                        options.headers['Proxy-Authorization'] = _this.proxyAuth;
                    }
                    //#endregion
                    //#region 证书
                    if (_.isObject(_this.https)) {
                        // ca 证书
                        if (_this.https.hasOwnProperty('certificateAuthority') && _.isString(_this.https.certificateAuthority) && _this.https.certificateAuthority.length > 0) {
                            try {
                                fs.accessSync(_this.https.certificateAuthority);
                                var ca_pem = fs.readFileSync(_this.https.certificateAuthority);
                                options.agentOptions['ca'] = ca_pem;
                            }
                            catch (err) {
                                if (isBase64(_this.https.certificateAuthority), { allowMime: true }) {
                                    options.agentOptions['ca'] = Base64.atob(_this.https.certificateAuthority);
                                }
                            }
                        }
                        // 客户端证书
                        if (_this.https.hasOwnProperty('certificate') && _.isString(_this.https.certificate) && _this.https.certificate.length > 0) {
                            try {
                                fs.accessSync(_this.https.certificate);
                                var ca_pem = fs.readFileSync(_this.https.certificate);
                                options.agentOptions['cert'] = ca_pem;
                            }
                            catch (err) {
                                if (isBase64(_this.https.certificate), { allowMime: true }) {
                                    options.agentOptions['cert'] = Base64.atob(_this.https.certificate);
                                }
                            }
                            // pfx证书 
                        }
                        else if (_this.https.hasOwnProperty('pfx') && _.isString(_this.https.pfx) && _this.https.pfx.length > 0) {
                            try {
                                fs.accessSync(_this.https.pfx);
                                var ca_pem = fs.readFileSync(_this.https.pfx);
                                options.agentOptions['pfx'] = ca_pem;
                            }
                            catch (err) {
                                if (isBase64(_this.https.pfx), { allowMime: true }) {
                                    options.agentOptions['pfx'] = Base64.atob(_this.https.pfx);
                                }
                            }
                        }
                        // 证书key文件
                        if (_this.https.hasOwnProperty('key') && _.isString(_this.https.key) && _this.https.key.length > 0) {
                            try {
                                fs.accessSync(_this.https.key);
                                var ca_pem = fs.readFileSync(_this.https.key);
                                options.agentOptions['key'] = ca_pem;
                            }
                            catch (err) {
                                if (isBase64(_this.https.key), { allowMime: true }) {
                                    options.agentOptions['key'] = Base64.atob(_this.https.key);
                                }
                            }
                        }
                        // 证书密码
                        options.agentOptions['passphrase'] = ((_a = _this.https) === null || _a === void 0 ? void 0 : _a.passphrase) || '';
                    }
                    //#endregion
                    // 发送并返回响应
                    var r = that_1.requestLink = request(options, function (error, response, body) {
                        var _a;
                        return __awaiter(this, void 0, void 0, function () {
                            var _headers, _key, _request, loopTarget, loopTarget, parsed, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
                            var _p, _q, _r;
                            return __generator(this, function (_s) {
                                switch (_s.label) {
                                    case 0:
                                        if (!error) return [3 /*break*/, 1];
                                        reject(that_1.ConvertResult('error', error.toString()));
                                        return [3 /*break*/, 12];
                                    case 1:
                                        _headers = [];
                                        if (_.isObject(response.request.headers)) {
                                            for (_key in response.request.headers) {
                                                _headers.push({
                                                    key: _key,
                                                    value: response.request.headers[_key]
                                                });
                                            }
                                        }
                                        _request = {
                                            header: _headers
                                        };
                                        if (_.isObject(response.request)) {
                                            _request = {
                                                url: response.request.href,
                                                uri: _.cloneDeep(JSON5.parse(JSON5.stringify(response.request.uri))),
                                                method: response.request.method,
                                                timeout: response.request.timeout,
                                                // qs:response.request.qs,
                                                contentType: (_a = response.request.headers['content-type']) !== null && _a !== void 0 ? _a : 'none',
                                                header: _headers,
                                                proxy: response.request.proxy,
                                                request_headers: response.request.headers,
                                                request_bodys: response.request['_requestBody'].request_bodys,
                                                body: response.request['_requestBody'].raw
                                            };
                                        }
                                        if (!(that_1.followRedirect && that_1.requestloop < that_1.maxrequstloop)) return [3 /*break*/, 10];
                                        if (!(response.caseless.has('location') === 'location')) return [3 /*break*/, 2];
                                        loopTarget = _.cloneDeep(target);
                                        loopTarget.url = loopTarget.request.url = response.caseless.get('location');
                                        that_1.request(loopTarget).then(function (res) {
                                            reslove(res);
                                        }).catch(function (e) {
                                            reject(e);
                                        });
                                        return [3 /*break*/, 9];
                                    case 2:
                                        if (!(response.caseless.has('www-authenticate') === 'www-authenticate')) return [3 /*break*/, 7];
                                        loopTarget = _.cloneDeep(target);
                                        parsed = new parsers.WWW_Authenticate(response.caseless.get('www-authenticate'));
                                        if (!(parsed.scheme == 'Digest')) return [3 /*break*/, 3];
                                        Object.assign(loopTarget.request.auth.digest, parsed.parms);
                                        that_1.request(loopTarget).then(function (res) {
                                            reslove(res);
                                        }).catch(function (e) {
                                            reject(e);
                                        });
                                        return [3 /*break*/, 6];
                                    case 3:
                                        if (!(loopTarget.request.auth.type == 'ntlm')) return [3 /*break*/, 4];
                                        loopTarget.request.auth.type == 'ntlm_close';
                                        Object.assign(loopTarget.request.auth.ntlm, {
                                            type2msg: ntlm.parseType2Message(response.caseless.get('www-authenticate')),
                                        });
                                        that_1.request(loopTarget).then(function (res) {
                                            reslove(res);
                                        }).catch(function (e) {
                                            reject(e);
                                        });
                                        return [3 /*break*/, 6];
                                    case 4:
                                        _b = reslove;
                                        _d = (_c = that_1).ConvertResult;
                                        _e = ['success', 'success'];
                                        _p = {
                                            request: _request
                                        };
                                        return [4 /*yield*/, that_1.formatResponseData(error, response, body)];
                                    case 5:
                                        _b.apply(void 0, [_d.apply(_c, _e.concat([(_p.response = _s.sent(),
                                                    _p)]))]);
                                        _s.label = 6;
                                    case 6: return [3 /*break*/, 9];
                                    case 7:
                                        _f = reslove;
                                        _h = (_g = that_1).ConvertResult;
                                        _j = ['success', 'success'];
                                        _q = {
                                            request: _request
                                        };
                                        return [4 /*yield*/, that_1.formatResponseData(error, response, body)];
                                    case 8:
                                        _f.apply(void 0, [_h.apply(_g, _j.concat([(_q.response = _s.sent(),
                                                    _q)]))]);
                                        _s.label = 9;
                                    case 9: return [3 /*break*/, 12];
                                    case 10:
                                        _k = reslove;
                                        _m = (_l = that_1).ConvertResult;
                                        _o = ['success', 'success'];
                                        _r = {
                                            request: _request
                                        };
                                        return [4 /*yield*/, that_1.formatResponseData(error, response, body)];
                                    case 11:
                                        _k.apply(void 0, [_m.apply(_l, _o.concat([(_r.response = _s.sent(),
                                                    _r)]))]);
                                        _s.label = 12;
                                    case 12: return [2 /*return*/];
                                }
                            });
                        });
                    });
                    if (target.request.body.mode === 'form-data') {
                        that_1.formatFormDataBodys(r.form(), target.request.body.parameter);
                    }
                }
            }
            catch (e) {
                reject(_this.ConvertResult('error', String(e)));
            }
        });
    };
    return ApipostRequest;
}());

module.exports = ApipostRequest;
